There are two ways with which we can create threads:
1. Extending Thread
2. Implementing Runnable
- Implementing Runnable is used when a class is already extending another class and we can only inherit one class in Java.

- User Threads: These are the threads used by the user to perform the task. JVM waits for the User Threads to get finish
- Daemon Threads: These are the threads that are run by the processes in the background. JVM do NOT wait for them. 
Different methods used in Threads are: 
1. t1.run(): to run a process on a separate thread
2. t1.start(): to start the thread
3. Thread.sleep(): to put the thread in the waiting state (TIMING_WAITING)
4. t1.join(): the main thread waits for the 't1' thread to complete it's execution and than only it, the main thread, will start excuting further
5. t1.setPriority(Thread.MIN_PRIORITY)
5. t1.setPriority(Thread.NORM_PRIORITY)
5. t1.setPriority(Thread.HIGH_PRIORITY)
6. t1.interrupt(): is sused to interrupt the thread, if the thread is sleeping than it will throw the interruptedException
7. Thread.yield(): is a hint to the schedular that the current thread is willing to yield its current use of a processor. The schedular is free to ignore the hint.

* synchronized has following issues:
1. No assurity of fairness
2. Indefinitly blocking
3. No interruptibility
4. Not able to recognize Read/Write locking

** Locks: It helps to keep the process synchronized, by locking the shared resources when a thread is using it
  They are of 2 types:
1. Intrinsic: These are built into every object in Java. You don't see them, but they're there. When you use a synchronized keyword, you're using these automatic Locks
2. Explicit: These are more advanced locks we can control ourself using the Lock class from java.util.concurrent.locks. You explicitly say when to lock and unlock, giving you more control over how and when people can write in the notebook

- Lock is Interface

* ReentrantLock have following methods [private final Lock lock = new ReentrantLock();]:
1. lock()
2. unlock()
3. trylock()
4. lockInterruptibility()
5. for maintaining the fairness, [private final Lock lock = new ReentrantLock(true);]

* Deadlock
  It is a situation in mulithreading where two or more threads are blocked forever, waiting for each other to release a resource. This typically occurs when two or more threads have circular dependencies on a set of locks.
  Typically it occurs when four conditions are met:
  1. Mutual Exclusion
  2. Hold and wait
  3. No Preemption: Resources cannot be forcibly taken from threads holding them
  4. Circular wait: A set of threads is waiting for each other in a circular chain

* Thread Communication
  In a mulithreaded environment, threads often need to communicate and coordinate with each other to accomplish a task. 
  Without a proper communication mechanisms, threads might end up in inefficient busy-waiting states, leading to wastage of CPU resources and potential deadlocks.
  There are certaing methods used for comminications:
  1. wait
  2. notify
  3. notifyAll

* Thread Safety
  It is the condition where the threads do not produce any random or inaccurate behaviour or deadlocks or race condition, then we can call it as thread safe

** Functional Interface: Is an interface where there is only one abstract method (only one method having no body) also known as Single Abstract Method (SAM) 

** Lambda Funciton: It is a anonymous function

* Thread Pooling:
  Collection of pre-initialised threads
  Helpful for:
  1. Resource Management
  2. Response Time
  3. Control OVer Thread Count


** Executors Framework in Java
    The Executors Framework was introduced in Java 5 as part of the java.util.concurrent package to simplify the development of concurrent applications by abstracting away many of the complexities involved in creating and managing threads
    The problems solved by Exicutor framework:
    1. Resource Management
    2. Scalability
    3. Thread Reuse
    4. Error Handling
** It has 3 core interfaces:
  1. Executor 
  2. ExecutorService
  3. ScheduledExicutorService
  
** ExecutorService has following methods:
  - submit(r) // runnable
  - submit(c) // callable
  - submit(r, result) // it takes 2 parameters first its submit the 'runnable' task and 2nd one is what you want as the 'result' on completion
  - shutdown()
  - shutdownnow()
  - awaitTermination()
  - isShutdown()
  - isTerminated()
  - invokeAll()  // executes the given tasks, returning as list of Futures holding their status and results when all complete. Future.isDone is true for each element of thre returned list, // this also blocks the main thread to wait for all the tasks to complete
  - invokeAny() // executes the given tasks, returning the result of one that has completed successfully i.e. without thowing an exception, if any do. Upon normal or exception rturn, tasks that have not completed are cancelled

* Callable: it is used when we want to return something
  - it has call() method
  - do not rquire to throw exception
* Runnable; it is used when we do not want to return anything
  - it has run() method
  - require try-catch block for throwing exception

* Future
- f.get() // waits for the task to get complete
- f.isDone() // return a boolean value indicating whether a task get completed/termininated or not
- f.cancel(true) // to cancel the task
- f.isCancelled()
- f.get(time, TimeUnit.SECOND) // it wait for the mentioned time
 

*** ScheduledExicutorService
- If want any task to be performed after any delay and also for periodic task performance


* CountDownLatch()
        `ExecutorService executorService = Executors.newFixedThreadPool(numberOfServices);

        // when we want more than 1 thread to get executed and the main thread to wait for them
        // CountDownLatch is NOT Resuable
        executorService.submit(new DependentService(latch));
        executorService.submit(new DependentService(latch));
        executorService.submit(new DependentService(latch));
        executorService.submit(new DependentService(latch));
        latch.await();

        System.out.println("Main");
        executorService.shutdown();`